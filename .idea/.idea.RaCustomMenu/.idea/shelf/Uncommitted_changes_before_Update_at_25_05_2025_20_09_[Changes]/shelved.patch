Index: RaCustomMenuLabApi/Plugin.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing HarmonyLib;\r\nusing LabApi.Features;\r\nusing LabApi.Loader.Features.Plugins;\r\nusing RaCustomMenuLabApi.API;\r\n\r\nnamespace RaCustomMenuLabApi;\r\n\r\npublic class Plugin : Plugin<Config>\r\n{\r\n    public override string Name { get; } = \"RaCustomMenuLabApi\";\r\n    public override string Description { get; } = \"\";\r\n    public override string Author { get; } = \"Bankokwak\";\r\n    public override Version Version { get; } = new Version(1, 0, 0);\r\n    public override Version RequiredApiVersion { get; } = new(LabApiProperties.CompiledVersion);\r\n\r\n    public static Plugin Instance;\r\n    private Harmony _harmony;\r\n\r\n    public override void Enable()\r\n    {\r\n        Instance = this;\r\n        _harmony = new Harmony(\"fr.bankokwak.patchs\");\r\n        _harmony.PatchAll();\r\n        \r\n        EventHandlers.RegisterEvent();\r\n        if(Config.EnableExamble)\r\n            Provider.RegisterAllProviders();\r\n    }\r\n\r\n    public override void Disable()\r\n    {\r\n        EventHandlers.UnRegisterEvent();\r\n        \r\n        _harmony.UnpatchAll();\r\n        _harmony = null;\r\n        Instance = null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RaCustomMenuLabApi/Plugin.cs b/RaCustomMenuLabApi/Plugin.cs
--- a/RaCustomMenuLabApi/Plugin.cs	(revision 660956d8c869f7ea693522bdd86fd823a96c5288)
+++ b/RaCustomMenuLabApi/Plugin.cs	(date 1748196538708)
@@ -11,7 +11,7 @@
     public override string Name { get; } = "RaCustomMenuLabApi";
     public override string Description { get; } = "";
     public override string Author { get; } = "Bankokwak";
-    public override Version Version { get; } = new Version(1, 0, 0);
+    public override Version Version { get; } = new Version(1, 1, 0);
     public override Version RequiredApiVersion { get; } = new(LabApiProperties.CompiledVersion);
 
     public static Plugin Instance;
Index: RaCustomMenuExiled/Plugin.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing Exiled.API.Enums;\r\nusing Exiled.API.Features;\r\nusing HarmonyLib;\r\nusing RaCustomMenuExiled.API;\r\n\r\nnamespace RaCustomMenuExiled;\r\n\r\npublic class Plugin : Plugin<Config>\r\n{\r\n    public override string Name => \"RaCustomMenuExiled\";\r\n    public override string Author => \"Bankokwak\";\r\n    public override Version Version => new Version(1, 0, 0);\r\n    public override Version RequiredExiledVersion { get; } = new Version(9,6,0);\r\n    public override PluginPriority Priority { get; } = PluginPriority.High;\r\n\r\n    public static Plugin Instance;\r\n    private Harmony _harmony;\r\n\r\n    public override void OnEnabled()\r\n    {\r\n        Instance = this;\r\n        _harmony = new Harmony(\"fr.bankokwak.patchs\");\r\n        _harmony.PatchAll();\r\n        \r\n        EventHandlers.RegisterEvent();\r\n        if(Config.EnableExamble)\r\n            Provider.RegisterAllProviders();\r\n        \r\n        base.OnEnabled();\r\n    }\r\n\r\n    public override void OnDisabled()\r\n    {\r\n        EventHandlers.UnRegisterEvent();\r\n        \r\n        _harmony.UnpatchAll();\r\n        _harmony = null;\r\n        Instance = null;\r\n        base.OnDisabled();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RaCustomMenuExiled/Plugin.cs b/RaCustomMenuExiled/Plugin.cs
--- a/RaCustomMenuExiled/Plugin.cs	(revision 660956d8c869f7ea693522bdd86fd823a96c5288)
+++ b/RaCustomMenuExiled/Plugin.cs	(date 1748196538702)
@@ -10,7 +10,7 @@
 {
     public override string Name => "RaCustomMenuExiled";
     public override string Author => "Bankokwak";
-    public override Version Version => new Version(1, 0, 0);
+    public override Version Version => new Version(1, 1, 0);
     public override Version RequiredExiledVersion { get; } = new Version(9,6,0);
     public override PluginPriority Priority { get; } = PluginPriority.High;
 
